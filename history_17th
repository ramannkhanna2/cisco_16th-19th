```

=========================================================================


provider - versioning  :
    
    
    version constraints 
5.76.0 ....

purpose : wt are the changes that are there in the newer ....  research abt the change in the release repositories of terraform : https://github.com/hashicorp/terraform-provider-aws/releases

raise a request for the upgrade >>> cab ticket >>> maintenace : u test the upgrade over on a qa env >> uat >> deploy that on producn


5.77.0 : newer version


========================================================

provider version : aws 

terraform : versioning

========================================================================================================




10 instances , 5 fiorewalls , 3 db , 2 lmbda , s3 bucket etc .....

t apply :
    
    output block
   public ips of all the instances , see the inbound rules , s3 bucket url ..... : external application , cicd pipeline .>>>>>
   
   
   depends on
   
   
   =============================================================================================
   
   
   root@ip-172-31-91-158:~# cat first.tf 
# Configure the AWS Provider
provider "aws" {
region = "us-east-1"
#version= "5.76.0"
access_key = "AKIAZ7FSO3B5YFZTT5QT"
secret_key = "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"
}

resource "aws_instance" "ec2" {
depends_on= [aws_s3_bucket.buck]
ami="ami-0e2c8caa4b6378d8c"
instance_type="t2.micro"
vpc_security_group_ids=["sg-0e8552c15babe88bc"]
tags= {
Name= "raman-first-server"
}
}


resource "aws_s3_bucket" "buck" {
  bucket = "my-tf-test-buckettttttttttttttttttttttttttttt"
  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}



resource "aws_ec2_instance_state" "ec22" {
instance_id = aws_instance.ec2.id
#state="stopped"
state="running"
}

resource "aws_eip" "lb" {
  instance = aws_instance.ec2.id
  domain   = "vpc"
}



output "vm_details" {
  value = {
    instance_type = aws_instance.ec2.instance_type
    private_dns   = aws_instance.ec2.private_dns
    state= aws_instance.ec2.instance_state
    publicip=aws_instance.ec2.public_ip
  }
  description = "Combined details of the instance: type and private DNS."
}


output "elasticIp" {
 value =aws_eip.lb.public_ip
}

output "s3details" {
 value=aws_s3_bucket.buck.arn
}




cat first.tf 
   87  t apply
   88  t destory
   89  t destroy
   90  cat first.tf 
   91  vi first.tf 
   92  cat first.tf 
   
    t state list
  111  t outputs
  112  t output
  113  t apply
  114  t output
  115  t output >> extapp.json
  116  cat extapp.json 
   
   
   ===========================================
   
   terraform graph
   
   
   root@ip-172-31-91-158:~# terraform graph
digraph G {
  rankdir = "RL";
  node [shape = rect, fontname = "sans-serif"];
  "aws_ec2_instance_state.ec22" [label="aws_ec2_instance_state.ec22"];
  "aws_eip.lb" [label="aws_eip.lb"];
  "aws_instance.ec2" [label="aws_instance.ec2"];
  "aws_s3_bucket.buck" [label="aws_s3_bucket.buck"];
  "aws_ec2_instance_state.ec22" -> "aws_instance.ec2";
  "aws_eip.lb" -> "aws_instance.ec2";
  "aws_instance.ec2" -> "aws_s3_bucket.buck";
}





https://dreampuf.github.io/GraphvizOnline/?engine=dot#digraph%20G%20%7B%0D%0A%20%20rankdir%20%3D%20%22RL%22%3B%0D%0A%20%20node%20%5Bshape%20%3D%20rect%2C%20fontname%20%3D%20%22sans-serif%22%5D%3B%0D%0A%20%20%22aws_ec2_instance_state.ec22%22%20%5Blabel%3D%22aws_ec2_instance_state.ec22%22%5D%3B%0D%0A%20%20%22aws_eip.lb%22%20%5Blabel%3D%22aws_eip.lb%22%5D%3B%0D%0A%20%20%22aws_instance.ec2%22%20%5Blabel%3D%22aws_instance.ec2%22%5D%3B%0D%0A%20%20%22aws_s3_bucket.buck%22%20%5Blabel%3D%22aws_s3_bucket.buck%22%5D%3B%0D%0A%20%20%22aws_ec2_instance_state.ec22%22%20-%3E%20%22aws_instance.ec2%22%3B%0D%0A%20%20%22aws_eip.lb%22%20-%3E%20%22aws_instance.ec2%22%3B%0D%0A%20%20%22aws_instance.ec2%22%20-%3E%20%22aws_s3_bucket.buck%22%3B%0D%0A%7D%0D%0A


===================================================================


Variables :
    
    centralzling the value of the arguments somewhere...............
    
    
    root@ip-172-31-91-158:~# export AWS_ACCESS_KEY_ID="AKIAZ7FSO3B5YFZTT5QT"
root@ip-172-31-91-158:~# export AWS_SECRET_ACCESS_KEY="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"
root@ip-172-31-91-158:~# export AWS_REGION="us-east-1"


or aws configure (awscli)


--- before variable implementation :
    
    resource "aws_security_group" "ec3" {
name= "raman-varaibles-demo"
#vpc_id="vpc-01948378f1e13345b"
ingress {
  from_port =443
  to_port= 443
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}


ingress {
  from_port =80
  to_port= 80
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}

ingress {
  from_port =3389
  to_port= 3389
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}

ingress {
  from_port =6389
  to_port= 6389
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}


ingress {
  from_port =22
  to_port= 22
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}


ingress {
  from_port =8080
  to_port= 8080
  protocol= "tcp"
  cidr_blocks= ["0.0.0.0/0"]
}

}



--- now after applying variable : the codes :
    
    
    root@ip-172-31-91-158:~# cat security.tf 
provider "aws" {
region="us-east-1"
}

resource "aws_security_group" "ec3" {
name= "raman-varaibles-demo"
#vpc_id="vpc-01948378f1e13345b"
ingress {
  from_port =443
  to_port= 443
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =80
  to_port= 80
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =3389
  to_port= 3389
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =6389
  to_port= 6389
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =22
  to_port= 22
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =8080
  to_port= 8080
  protocol= var.kr
  cidr_blocks= [var.rk]
}

}



root@ip-172-31-91-158:~# cat variable.tf 
variable "rk" {
#default= "0.0.0.0/0"
default= "192.168.1.0/24"
}

variable "kr" {
#default="tcp"
default="udp"
}


=========================================================
    
    string
    numeric
    boolean
    list
    map type
    
    
    
        first.tf : s3 bucket , aws instance , eip 
   security.tf : firewall >>> linked to instancein first.tf
    
    ----------------------------------------
    
    
    ui : asking the value of variable on the ui itself
    
      -- override the variables  on the fly the way :
       t plan -var "ak=t2.small"
    
    default value inside variable.tf
   
   
   
   through a custom.tfvars  , prod.tfvars , uat.tfvars, etc...
   t plan -var-file "prod.tfvars"
   
 ---------------------------------------------------------------------------------------------------
 
 
 root@ip-172-31-91-158:~# ls
extapp.json  first.tf  git  prod.tfvars  security.tf  snap  terraform.tfstate  terraform.tfstate.backup  variable.tf
root@ip-172-31-91-158:~# cat first.tf 

resource "aws_instance" "ec2" {
depends_on= [aws_s3_bucket.buck]
ami="ami-0e2c8caa4b6378d8c"
instance_type=var.ak
vpc_security_group_ids=[aws_security_group.ec3.id]
tags= {
Name= "raman-first-server"
}
}


resource "aws_s3_bucket" "buck" {
  bucket = "my-tf-test-buckettttttttttttttttttttttttttttt"
  tags = {
    Name        = "My bucket"
    Environment = "Dev"
  }
}



resource "aws_ec2_instance_state" "ec22" {
instance_id = aws_instance.ec2.id
#state="stopped"
state="running"
}

resource "aws_eip" "lb" {
  instance = aws_instance.ec2.id
  domain   = "vpc"
}



output "vm_details" {
  value = {
    instance_type = aws_instance.ec2.instance_type
    private_dns   = aws_instance.ec2.private_dns
    state= aws_instance.ec2.instance_state
    publicip=aws_instance.ec2.public_ip
  }
  description = "Combined details of the instance: type and private DNS."
}


output "elasticIp" {
 value =aws_eip.lb.public_ip
}

output "s3details" {
 value=aws_s3_bucket.buck.arn
}
root@ip-172-31-91-158:~# ls
extapp.json  first.tf  git  prod.tfvars  security.tf  snap  terraform.tfstate  terraform.tfstate.backup  variable.tf
root@ip-172-31-91-158:~# cat security.tf 
provider "aws" {
region="us-east-1"
}

resource "aws_security_group" "ec3" {
name= "raman-varaibles-demo"
#vpc_id="vpc-01948378f1e13345b"
ingress {
  from_port =443
  to_port= 443
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =80
  to_port= 80
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =3389
  to_port= 3389
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =6389
  to_port= 6389
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =22
  to_port= 22
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =8080
  to_port= 8080
  protocol= var.kr
  cidr_blocks= [var.rk]
}

}
root@ip-172-31-91-158:~# ls
extapp.json  first.tf  git  prod.tfvars  security.tf  snap  terraform.tfstate  terraform.tfstate.backup  variable.tf
root@ip-172-31-91-158:~# cat variable.tf 
variable "rk" {
#default= "0.0.0.0/0"
default= "192.168.1.0/24"
}

variable "kr" {
#default="tcp"
default="udp"
}


variable "ak" {
default="t2.micro"
}
root@ip-172-31-91-158:~# cat prod.tfvars 
#rk="0.0.0.0/0"
kr="tcp"
ak="t2.large"



=========================================================================

implementing terraform.tfvars to isolate credentials :
    
    
    root@ip-172-31-91-158:~# cat terraform.tfvars
access_key="AKIAZ7FSO3B5YFZTT5QT"
secret_access_key="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"
root@ip-172-31-91-158:~# cat variable.tf 
variable "rk" {
#default= "0.0.0.0/0"
default= "192.168.1.0/24"
}

variable "kr" {
#default="tcp"
default="udp"
}


variable "ak" {
default="t2.micro"
}

variable "access_key" {
}

variable "secret_access_key" {
}
root@ip-172-31-91-158:~# cat security.tf 
provider "aws" {
region="us-east-1"
access_key=var.access_key
secret_key=var.secret_access_key
}

resource "aws_security_group" "ec3" {
name= "raman-varaibles-demo"
#vpc_id="vpc-01948378f1e13345b"
ingress {
  from_port =443
  to_port= 443
  protocol= var.kr
  cidr_blocks= [var.rk]
}


ingress {
  from_port =80
  to_port= 80
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =3389
  to_port= 3389
  protocol= var.kr
  cidr_blocks= [var.rk]
}

ingress {
  from_port =6389
  to_port= 6389
  protocol= var.kr
  cidr_blocks= [var.rk]
}


...

==============================================
    
    
data source : fetch the information for u so thatu cn use that info anywhere in ur tf code 
    
    
    
    root@ip-172-31-91-158:~/data# cat main.tf 
provider "aws" {
region="us-east-1"
access_key="AKIAZ7FSO3B5YFZTT5QT"
secret_key="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"

}


data "aws_instance" "data1" {
instance_id = "i-0643c858fb3e16db8"
}


resource "aws_instance" "data2" {
ami=data.aws_instance.data1.ami
instance_type= data.aws_instance.data1.instance_type

tags= {
Name= "raman-test"
}
}


output "jhons-instance-details" {
value= data.aws_instance.data1
}


=========================================


root@ip-172-31-91-158:~/data# cat main.tf 
provider "aws" {
region="us-west-1"
access_key="AKIAZ7FSO3B5YFZTT5QT"
secret_key="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"

}


data "aws_ami" "app_ami" {
  most_recent = true
  owners = ["amazon"]


  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}



resource "aws_instance" "app_ami" {
ami= data.aws_ami.app_ami.id
instance_type= "t2.micro"

tags= {
Name= "raman-test"
}
}


===========================================================

```
